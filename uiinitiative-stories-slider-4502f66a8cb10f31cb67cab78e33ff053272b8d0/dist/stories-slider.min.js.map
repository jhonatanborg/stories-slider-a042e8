{"version":3,"sources":["../src/stories-slider.esm.js"],"names":["el","params","mainSwiperEl","querySelector","autoplayDuration","Swiper","EffectCube","onSlidesIndexesChange","onAutoplayStart","onAutoplayStop","mainSwiper","enabled","activeSubSwiperIndex","subSwipers","slideIndexesChangeRaf","isTouched","touchStartTime","touchStartTimeout","touchHoldDuration","autoplayStartTime","autoplayTimeLeft","autoplayTouchPaused","startAutoplay","swiper","durationForce","subSwiperIndex","indexOf","duration","currentSlideDuration","parseInt","slides","activeIndex","getAttribute","Number","isNaN","storiesSliderAutoplayTimeout","setTimeout","isEnd","slideNext","stopAutoplay","clearTimeout","pauseAutoplay","undefined","Date","getTime","calcTranslate","$currentBullet","$el","find","children","remove","append","onSubSwiperSlideChange","removeClass","prevAll","addClass","nextAll","clientWidth","transition","transform","cancelAnimationFrame","requestAnimationFrame","setPerspectiveFix","classList","add","removePerspectiveFix","modules","effect","speed","cubeEffect","shadow","observer","on","transitionStart","sliderFirstMove","transitionEnd","init","resistanceRatio","slideChange","prevSubSwiper","currentSubSwiper","initMainSwiper","querySelectorAll","forEach","subSwiperEl","nested","allowTouchMove","touchStart","touchEnd","resumeAutoPlay","paginationContainerEl","document","createElement","i","length","paginationBulletEl","appendChild","initSubSwiperPagination","slideEl","navLeftEl","navRightEl","addEventListener","isBeginning","slidePrev","initSubSwiperNavigation","push","destroy","subSwiper","destroySubSwiperNavigation","slideTo","mainIndex","subIndex","destroyed","enable","disable"],"mappings":"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","file":"stories-slider.min.js","sourcesContent":["/* eslint-disable no-shadow */\nexport default function createStoriesSlider(el, params = {}) {\n  const mainSwiperEl = el.querySelector('.swiper');\n  const {\n    autoplayDuration = 5000,\n    Swiper,\n    EffectCube,\n    onSlidesIndexesChange,\n    onAutoplayStart,\n    onAutoplayStop,\n  } = params;\n  let { enabled = true } = params;\n\n  let activeSubSwiperIndex = 0;\n\n  let mainSwiper;\n  const subSwipers = [];\n\n  let slideIndexesChangeRaf;\n\n  let isTouched;\n  let touchStartTime;\n  let touchStartTimeout;\n  let touchHoldDuration;\n  let autoplayStartTime;\n  let autoplayTimeLeft;\n  let autoplayTouchPaused;\n\n  const startAutoplay = (swiper, durationForce) => {\n    const subSwiperIndex = subSwipers.indexOf(swiper);\n    let duration =\n      typeof durationForce === 'undefined' ? autoplayDuration : durationForce;\n    const currentSlideDuration = parseInt(\n      swiper.slides[swiper.activeIndex].getAttribute('data-duration'),\n      10,\n    );\n    if (\n      !Number.isNaN(currentSlideDuration) &&\n      currentSlideDuration > 0 &&\n      typeof durationForce === 'undefined'\n    ) {\n      duration = currentSlideDuration;\n    }\n    autoplayTimeLeft = duration;\n\n    swiper.storiesSliderAutoplayTimeout = setTimeout(() => {\n      if (!swiper.isEnd) {\n        swiper.slideNext();\n      } else {\n        if (activeSubSwiperIndex !== subSwiperIndex) return;\n        if (!mainSwiper.isEnd) mainSwiper.slideNext();\n      }\n    }, duration);\n\n    if (onAutoplayStart) onAutoplayStart(swiper);\n    return duration;\n  };\n  const stopAutoplay = (swiper) => {\n    clearTimeout(swiper.storiesSliderAutoplayTimeout);\n    if (onAutoplayStop) onAutoplayStop(swiper);\n  };\n  const pauseAutoplay = (swiper) => {\n    stopAutoplay(swiper);\n    const duration = autoplayTimeLeft || autoplayDuration;\n    let currentSlideDuration = parseInt(\n      swiper.slides[swiper.activeIndex].getAttribute('data-duration'),\n      10,\n    );\n    if (Number.isNaN(currentSlideDuration)) currentSlideDuration = undefined;\n    autoplayTimeLeft = duration - (new Date().getTime() - autoplayStartTime);\n    if (swiper.isEnd && autoplayTimeLeft < 0) return;\n    if (autoplayTimeLeft < 0) autoplayTimeLeft = 0;\n\n    const calcTranslate =\n      1 - autoplayTimeLeft / (currentSlideDuration || autoplayDuration);\n    const $currentBullet = swiper.$el.find(\n      `.stories-slider-pagination-bullet:nth-child(${swiper.activeIndex + 1})`,\n    );\n\n    $currentBullet.children('span').remove();\n    $currentBullet.append(\n      `<span style=\"transform:translateX(${\n        -100 + calcTranslate * 100\n      }%)\"></span>`,\n    );\n  };\n  const resumeAutoPlay = (swiper) => {\n    if (swiper.isEnd && autoplayTimeLeft < 0) return;\n    autoplayStartTime = new Date().getTime();\n\n    startAutoplay(swiper, autoplayTimeLeft);\n    swiper.$el\n      .find(\n        `.stories-slider-pagination-bullet:nth-child(${\n          swiper.activeIndex + 1\n        })`,\n      )\n      .children('span')\n      .transform('translateX(0%)')\n      .transition(`${autoplayTimeLeft}ms`);\n  };\n\n  const onSubSwiperSlideChange = (swiper) => {\n    stopAutoplay(swiper);\n    startAutoplay(swiper);\n    autoplayStartTime = new Date().getTime();\n    swiper.$el\n      .find('.stories-slider-pagination-bullet-current')\n      .removeClass('stories-slider-pagination-bullet-current');\n    const $currentBullet = swiper.$el.find(\n      `.stories-slider-pagination-bullet:nth-child(${swiper.activeIndex + 1})`,\n    );\n    // prev bullets\n    $currentBullet\n      .prevAll()\n      .addClass('stories-slider-pagination-bullet-viewed')\n      .children('span')\n      .remove();\n    $currentBullet.prevAll().append('<span></span>');\n\n    // next bullets\n    $currentBullet\n      .nextAll()\n      .removeClass(\n        'stories-slider-pagination-bullet-viewed stories-slider-pagination-bullet-current',\n      )\n      .children('span')\n      .remove();\n    $currentBullet.nextAll().append('<span></span>');\n\n    // current bullet\n    $currentBullet\n      .removeClass('stories-slider-pagination-bullet-viewed')\n      .addClass('stories-slider-pagination-bullet-current')\n      .children('span')\n      .remove();\n    $currentBullet.append('<span></span>');\n    // eslint-disable-next-line\n    const __clientWidth = $currentBullet[0].clientWidth;\n    $currentBullet\n      .children('span')\n      .transition(`${autoplayTimeLeft}ms`)\n      .transform('translateX(0%)');\n    if (onSlidesIndexesChange) {\n      cancelAnimationFrame(slideIndexesChangeRaf);\n      slideIndexesChangeRaf = requestAnimationFrame(() => {\n        onSlidesIndexesChange(activeSubSwiperIndex, swiper.activeIndex);\n      });\n    }\n  };\n\n  const initMainSwiper = () => {\n    const setPerspectiveFix = () => {\n      el.classList.add('stories-slider-perspective');\n    };\n    const removePerspectiveFix = () => {\n      el.classList.remove('stories-slider-perspective');\n    };\n    mainSwiper = new Swiper(mainSwiperEl, {\n      modules: typeof EffectCube !== 'undefined' ? [EffectCube] : [],\n      effect: 'cube',\n      speed: 500,\n      cubeEffect: {\n        shadow: false,\n      },\n      observer: true,\n      on: {\n        transitionStart() {\n          removePerspectiveFix();\n        },\n        sliderFirstMove() {\n          removePerspectiveFix();\n        },\n        transitionEnd() {\n          setPerspectiveFix();\n        },\n        init(mainSwiper) {\n          mainSwiper.params.resistanceRatio = 0.5;\n          setPerspectiveFix();\n        },\n        slideChange() {\n          const prevSubSwiper = subSwipers[activeSubSwiperIndex];\n          activeSubSwiperIndex = mainSwiper.activeIndex;\n          const currentSubSwiper = subSwipers[activeSubSwiperIndex];\n          stopAutoplay(prevSubSwiper);\n          startAutoplay(currentSubSwiper);\n          onSubSwiperSlideChange(currentSubSwiper, false);\n        },\n      },\n    });\n  };\n\n  const initSubSwiperPagination = (subSwiperEl) => {\n    const slides = subSwiperEl.querySelectorAll('.swiper-slide');\n    const paginationContainerEl = document.createElement('div');\n    paginationContainerEl.classList.add('stories-slider-pagination');\n\n    for (let i = 0; i < slides.length; i += 1) {\n      const paginationBulletEl = document.createElement('div');\n      paginationBulletEl.classList.add('stories-slider-pagination-bullet');\n      paginationBulletEl.appendChild(document.createElement('span'));\n      paginationContainerEl.appendChild(paginationBulletEl);\n    }\n\n    subSwiperEl.appendChild(paginationContainerEl);\n  };\n  const destroySubSwiperPagination = (swiper) => {\n    swiper.$el\n      .find('.stories-slider-pagination, .stories-slider-pagination-bullet')\n      .remove();\n  };\n  const initSubSwiperNavigation = (subSwiperEl, swiper) => {\n    const slides = subSwiperEl.querySelectorAll('.swiper-slide');\n\n    slides.forEach((slideEl) => {\n      const navLeftEl = document.createElement('div');\n      const navRightEl = document.createElement('div');\n\n      navLeftEl.classList.add(\n        'stories-slider-button',\n        'stories-slider-button-prev',\n      );\n      navRightEl.classList.add(\n        'stories-slider-button',\n        'stories-slider-button-next',\n      );\n\n      slideEl.appendChild(navLeftEl);\n      slideEl.appendChild(navRightEl);\n\n      const onNavLeftClick = () => {\n        if (touchHoldDuration > 200) return;\n        if (swiper.isBeginning) {\n          mainSwiper.slidePrev();\n          return;\n        }\n        swiper.slidePrev();\n      };\n      const onNavRightClick = () => {\n        if (touchHoldDuration > 200) return;\n        if (swiper.isEnd) {\n          mainSwiper.slideNext();\n          return;\n        }\n        swiper.slideNext();\n      };\n\n      navLeftEl.addEventListener('click', onNavLeftClick);\n      navRightEl.addEventListener('click', onNavRightClick);\n    });\n  };\n\n  const destroySubSwiperNavigation = (swiper) => {\n    swiper.slides.find('.stories-slider-button').remove();\n  };\n  const initSubSwipers = () => {\n    el.querySelectorAll('.swiper .swiper').forEach(\n      (subSwiperEl, subSwiperIndex) => {\n        const swiper = new Swiper(subSwiperEl, {\n          speed: 1,\n          nested: true,\n          allowTouchMove: false,\n          observer: true,\n          on: {\n            touchStart(swiper) {\n              isTouched = true;\n              autoplayTouchPaused = false;\n              touchStartTime = new Date().getTime();\n              touchStartTimeout = setTimeout(() => {\n                autoplayTouchPaused = true;\n                pauseAutoplay(swiper);\n              }, 200);\n            },\n            touchEnd(swiper) {\n              clearTimeout(touchStartTimeout);\n              if (activeSubSwiperIndex !== subSwiperIndex) return;\n              if (!isTouched) {\n                return;\n              }\n              touchHoldDuration = new Date().getTime() - touchStartTime;\n              if (autoplayTouchPaused) resumeAutoPlay(swiper);\n              autoplayTouchPaused = false;\n              isTouched = false;\n            },\n            init(swiper) {\n              if (!enabled) return;\n              if (activeSubSwiperIndex !== subSwiperIndex) {\n                stopAutoplay(swiper);\n              } else {\n                requestAnimationFrame(() => {\n                  onSubSwiperSlideChange(swiper);\n                });\n              }\n            },\n            slideChange(swiper) {\n              onSubSwiperSlideChange(swiper);\n            },\n          },\n        });\n\n        initSubSwiperPagination(subSwiperEl);\n\n        initSubSwiperNavigation(subSwiperEl, swiper);\n\n        subSwipers.push(swiper);\n      },\n    );\n  };\n\n  initMainSwiper();\n  initSubSwipers();\n\n  const enable = () => {\n    if (enabled) return;\n    subSwipers.forEach((subSwiper, subSwiperIndex) => {\n      if (subSwiperIndex === activeSubSwiperIndex) {\n        onSubSwiperSlideChange(subSwiper);\n      }\n    });\n  };\n\n  const disable = () => {\n    enabled = false;\n    subSwipers.forEach((subSwiper, subSwiperIndex) => {\n      if (subSwiperIndex === activeSubSwiperIndex) {\n        pauseAutoplay(subSwiper);\n      } else {\n        stopAutoplay(subSwiper);\n      }\n    });\n  };\n\n  const destroy = () => {\n    if (mainSwiper && mainSwiper.destroy) mainSwiper.destroy();\n    subSwipers.forEach((subSwiper) => {\n      stopAutoplay(subSwiper);\n      destroySubSwiperPagination(subSwiper);\n      destroySubSwiperNavigation(subSwiper);\n      if (subSwiper.destroy) subSwiper.destroy();\n    });\n  };\n\n  const slideTo = (mainIndex, subIndex) => {\n    if (mainSwiper && mainSwiper.slideTo && !mainSwiper.destroyed) {\n      mainSwiper.slideTo(mainIndex, 0);\n    }\n    if (typeof subIndex !== 'undefined') {\n      const subSwiper = subSwipers[mainIndex];\n      if (subSwiper.slideTo && !subSwiper.destroyed) {\n        if (subSwiper.activeIndex === subIndex) {\n          onSubSwiperSlideChange(subSwiper);\n        } else {\n          subSwiper.slideTo(subIndex, 0);\n        }\n      }\n    }\n  };\n\n  return { el, mainSwiper, subSwipers, destroy, slideTo, enable, disable };\n}\n"]}